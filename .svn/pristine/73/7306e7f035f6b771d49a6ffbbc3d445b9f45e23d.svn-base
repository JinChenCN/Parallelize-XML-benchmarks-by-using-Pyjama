package spec.benchmarks.xml.validation;//#GEN#[1]#PJ#
//#GEN#[1]#PJ#
import pj.parser.ast.visitor.DummyClassToDetermineVariableType;//#GEN#[1]#PJ#
import pt.runtime.*;//#GEN#[1]#PJ#
import pj.Pyjama;//#GEN#[1]#PJ#
import pj.PJPackageOnly;//#GEN#[1]#PJ#
import pj.UniqueThreadIdGeneratorForOpenMP;//#GEN#[1]#PJ#
import pi.ParIteratorFactory;//#GEN#[1]#PJ#
import pi.ParIterator;//#GEN#[1]#PJ#
import pi.reductions.Reducible;//#GEN#[1]#PJ#
import pi.reductions.Reduction;//#GEN#[1]#PJ#
import java.util.concurrent.atomic.*;//#GEN#[1]#PJ#
import java.util.concurrent.*;//#GEN#[1]#PJ#
import java.awt.EventQueue;//#GEN#[1]#PJ#
import java.util.concurrent.ExecutorService;//#GEN#[1]#PJ#
import java.util.concurrent.Executors;//#GEN#[1]#PJ#
import java.util.concurrent.TimeUnit;//#GEN#[1]#PJ#
import javax.swing.SwingUtilities;//#GEN#[1]#PJ#
import pj.parser.ast.visitor.DummyClassToDetermineVariableType;//#GEN#[3]#PJ#
import pj.*;//#GEN#[4]#PJ#
import java.io.File;//#GEN#[5]#PJ#
import java.io.IOException;//#GEN#[6]#PJ#
import java.util.concurrent.atomic.AtomicInteger;//#GEN#[7]#PJ#
import java.util.Arrays;//#GEN#[8]#PJ#
import javax.xml.XMLConstants;//#GEN#[9]#PJ#
import javax.xml.parsers.ParserConfigurationException;//#GEN#[10]#PJ#
import javax.xml.transform.Source;//#GEN#[11]#PJ#
import javax.xml.transform.stream.StreamSource;//#GEN#[12]#PJ#
import javax.xml.validation.Schema;//#GEN#[13]#PJ#
import javax.xml.validation.SchemaFactory;//#GEN#[14]#PJ#
import javax.xml.validation.Validator;//#GEN#[15]#PJ#
import org.xml.sax.SAXException;//#GEN#[16]#PJ#
import spec.harness.Constants;//#GEN#[17]#PJ#
import spec.harness.Context;//#GEN#[18]#PJ#
import spec.harness.Launch;//#GEN#[19]#PJ#
import spec.harness.Util;//#GEN#[20]#PJ#
import spec.harness.results.BenchmarkResult;//#GEN#[21]#PJ#
import spec.io.FileCache;//#GEN#[22]#PJ#
import spec.io.FileCache.CachedFile;//#GEN#[23]#PJ#
import spec.benchmarks.xml.XMLBenchmark;//#GEN#[24]#PJ#
//#GEN#[24]#PJ#
import pi.reductions.Reducible;//#GEN#[24]#PJ#
import java.util.*;//#GEN#[24]#PJ#
//#GEN#[24]#PJ#
public class Main extends XMLBenchmark {//#GEN#[26]#PJ#
    private static final int XSD_NUMBER = 6;private static FileCache.CachedFile[] allInstanceBytes;private static FileCache.CachedFile[] allSchemaBytes;private static Validator[][] allValidators;public static String testType() {{//#GEN#[31]#PJ#
        return MULTI;//#GEN#[32]#PJ#
    }
    }
    static private ArrayList<ParIterator<?>> _omp_piVarContainer = new ArrayList<ParIterator<?>>();//#GEN#[-1]#PJ#
static private AtomicBoolean _holderForPIFirst= new AtomicBoolean(false);//#GEN#[-1]#PJ#

    private static String[] schemaNames = { "validation_input.xsd", "periodic_table.xsd", "play.xsd", "structure.xsd", "po.xsd", "personal.xsd" };private static String[] instanceNames = { "validation_input.xml", "periodicxsd.xml", "much_adoxsd.xml", "structure.xml", "po.xml", "personal.xml" };private static int loops[] = { 1, 5, 3, 52, 647, 419 };public static void setupBenchmark() {{//#GEN#[37]#PJ#
        String dirName = Util.getProperty(Constants.XML_VALIDATION_INPUT_DIR_PROP, null);//#GEN#[38]#PJ#
        try {//#GEN#[39]#PJ#
            allInstanceBytes = new FileCache.CachedFile[XSD_NUMBER];//#GEN#[40]#PJ#
            FileCache cache = Context.getFileCache();//#GEN#[41]#PJ#
            for (int i = 0; i < XSD_NUMBER; i++) //#GEN#[42]#PJ#
            {//#GEN#[42]#PJ#
                String name = getFullName(Main.class, dirName, instanceNames[i]);//#GEN#[43]#PJ#
                allInstanceBytes[i] = cache.new CachedFile(name);//#GEN#[44]#PJ#
                allInstanceBytes[i].cache();//#GEN#[45]#PJ#
            }//#GEN#[46]#PJ#
            allSchemaBytes = new FileCache.CachedFile[XSD_NUMBER];//#GEN#[47]#PJ#
            for (int i = 0; i < XSD_NUMBER; i++) //#GEN#[48]#PJ#
            {//#GEN#[48]#PJ#
                String name = getFullName(Main.class, dirName, schemaNames[i]);//#GEN#[49]#PJ#
                allSchemaBytes[i] = cache.new CachedFile(name);//#GEN#[50]#PJ#
                allSchemaBytes[i].cache();//#GEN#[51]#PJ#
            }//#GEN#[52]#PJ#
            setupValidators(dirName);//#GEN#[53]#PJ#
        } catch (IOException e) {//#GEN#[54]#PJ#
            e.printStackTrace(Context.getOut());//#GEN#[55]#PJ#
        }//#GEN#[56]#PJ#
    }
    }
    
    private static void setupValidators(String dirName) {{//#GEN#[58]#PJ#
        int threads = Launch.currentNumberBmThreads;//#GEN#[59]#PJ#
        allValidators = new Validator[threads][XSD_NUMBER];//#GEN#[60]#PJ#
        try {//#GEN#[61]#PJ#
            SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);//#GEN#[62]#PJ#
            sf.setErrorHandler(null);//#GEN#[63]#PJ#
            for (int i = 0; i < XSD_NUMBER; i++) //#GEN#[64]#PJ#
            {//#GEN#[64]#PJ#
                String xsdFilename = getFullName(Main.class, dirName, schemaNames[i]);//#GEN#[65]#PJ#
                File tempURI = new File(xsdFilename);//#GEN#[66]#PJ#
                Schema precompSchema;//#GEN#[67]#PJ#
                if (tempURI.isAbsolute()) //#GEN#[68]#PJ#
                {//#GEN#[68]#PJ#
                    precompSchema = sf.newSchema(new StreamSource(allSchemaBytes[i].getStream(), tempURI.toURI().toString()));//#GEN#[69]#PJ#
                } else {//#GEN#[70]#PJ#
                    precompSchema = sf.newSchema(new StreamSource(allSchemaBytes[i].getStream(), xsdFilename));//#GEN#[71]#PJ#
                }//#GEN#[72]#PJ#
                for (int j = 0; j < threads; j++) //#GEN#[73]#PJ#
                {//#GEN#[73]#PJ#
                    allValidators[j][i] = precompSchema.newValidator();//#GEN#[74]#PJ#
                }//#GEN#[75]#PJ#
            }//#GEN#[76]#PJ#
        } catch (SAXException e) {//#GEN#[77]#PJ#
            e.printStackTrace();//#GEN#[78]#PJ#
        } catch (Exception e) {//#GEN#[79]#PJ#
            e.printStackTrace();//#GEN#[80]#PJ#
        }//#GEN#[81]#PJ#
    }
    }
    
    private Validator[] schemaBoundValidator;public Main(BenchmarkResult bmResult, int threadId) {//#GEN#[84]#PJ#
        super(bmResult, threadId);//#GEN#[85]#PJ#
        schemaBoundValidator = allValidators[threadId - 1];//#GEN#[86]#PJ#
    }public void harnessMain() {{//#GEN#[88]#PJ#
        try {//#GEN#[89]#PJ#
            long start = System.currentTimeMillis();//#GEN#[90]#PJ#
            executeWorkload();//#GEN#[91]#PJ#
            long time = System.currentTimeMillis() - start;//#GEN#[92]#PJ#
            System.out.println("PJ Parallel xml validation has taken  " + (time / 1000.0) + " seconds.");//#GEN#[93]#PJ#
        } catch (Exception e) {//#GEN#[94]#PJ#
            e.printStackTrace(Context.getOut());//#GEN#[95]#PJ#
        }//#GEN#[96]#PJ#
    }
    }
    
    public static void main(String[] args) throws Exception {
    Pyjama.init();//#GEN#[97]#PJ#
    {//#GEN#[98]#PJ#
        runSimple(Main.class, args);//#GEN#[99]#PJ#
    }
    }
    
    private void executeWorkload() throws ParserConfigurationException, IOException, SAXException {{//#GEN#[101]#PJ#
        /*OpenMP Parallel region (#0) -- START *///#GEN#[102]#PJ#
        if(Pyjama.insideParallelRegion() ) {//#GEN#[102]#PJ#
            /* If already inside a parallel region, execute sequentially (nested parallelism currently not supported) *///#GEN#[102]#PJ#
            {//#GEN#[103]#PJ#
                for (int i = 0; i < XSD_NUMBER; i = i+1) //#GEN#[105]#PJ#
                {//#GEN#[105]#PJ#
                    Context.getOut().println("Validating " + instanceNames[i]);//#GEN#[106]#PJ#
                    try {//#GEN#[107]#PJ#
                        doValidationTests(loops[i], allInstanceBytes[i], schemaBoundValidator[i]);//#GEN#[108]#PJ#
                    } catch (SAXException e) {//#GEN#[109]#PJ#
                        e.printStackTrace();//#GEN#[110]#PJ#
                    } catch (Exception e) {//#GEN#[111]#PJ#
                        e.printStackTrace();//#GEN#[112]#PJ#
                    }//#GEN#[113]#PJ#
                }//#GEN#[114]#PJ#
            }//#GEN#[115]#PJ#
        } else {//#GEN#[102]#PJ#
            /* Else, execute in parallel *///#GEN#[102]#PJ#
            PJPackageOnly.setThreadCountCurrentParallelRegion(Pyjama.omp_get_num_threads());//#GEN#[102]#PJ#
//#GEN#[102]#PJ#
            /* Process data clauses *///#GEN#[102]#PJ#
            _omp__parallelRegionVarHolderClass_Main0 _omp__parallelRegionVarHolderInstance_0 = new _omp__parallelRegionVarHolderClass_Main0();//#GEN#[102]#PJ#
//#GEN#[102]#PJ#
            /* Execute using traditional OpenMP (master thread part of the team) *///#GEN#[102]#PJ#
            PJPackageOnly.setMasterThread(Thread.currentThread());//#GEN#[102]#PJ#
            TaskID _omp__parallelRegionTaskID_0 = _ompParallelRegion_0(_omp__parallelRegionVarHolderInstance_0);//#GEN#[102]#PJ#
            __pt___ompParallelRegion_0(_omp__parallelRegionVarHolderInstance_0);//#GEN#[102]#PJ#
            try {_omp__parallelRegionTaskID_0.waitTillFinished();} catch(Exception __pt__ex) { __pt__ex.printStackTrace(); }//#GEN#[102]#PJ#
            //#GEN#[102]#PJ#
            PJPackageOnly.setMasterThread(null);//#GEN#[102]#PJ#
            _holderForPIFirst.set(true);//#GEN#[102]#PJ#
//#GEN#[102]#PJ#
            PJPackageOnly.setThreadCountCurrentParallelRegion(1);//#GEN#[102]#PJ#
        }//#GEN#[102]#PJ#
        /*OpenMP Parallel region (#0) -- END *///#GEN#[102]#PJ#
//#GEN#[102]#PJ#
    }
    }
        private AtomicBoolean _imFirst_2 = new AtomicBoolean(true);//#GEN#[-1]#PJ#
    private AtomicInteger _imFinishedCounter_2 = new AtomicInteger(0);//#GEN#[-1]#PJ#
    private CountDownLatch _waitBarrier_2 = new CountDownLatch(1);//#GEN#[-1]#PJ#
    private CountDownLatch _waitBarrierAfter_2 = new CountDownLatch(1);//#GEN#[-1]#PJ#
    private ParIterator<Integer> _pi_2 = null;//#GEN#[-1]#PJ#
    private Integer _lastElement_2 = null;//#GEN#[-1]#PJ#
    private _ompWorkSharedUserCode_Main2_variables _ompWorkSharedUserCode_Main2_variables_instance = null;//#GEN#[-1]#PJ#
        private void _ompWorkSharedUserCode_Main2(_ompWorkSharedUserCode_Main2_variables __omp_vars) {//#GEN#[-1]#PJ#
//#GEN#[-1]#PJ#
        Integer i;//#GEN#[-1]#PJ#
        while (_pi_2.hasNext()) {//#GEN#[-1]#PJ#
            i = _pi_2.next();//#GEN#[-1]#PJ#
            //#GEN#[-1]#PJ#
            {//#GEN#[105]#PJ#
                Context.getOut().println("Validating " + instanceNames[i]);//#GEN#[106]#PJ#
                try {//#GEN#[107]#PJ#
                    doValidationTests(loops[i], allInstanceBytes[i], schemaBoundValidator[i]);//#GEN#[108]#PJ#
                } catch (SAXException e) {//#GEN#[109]#PJ#
                    e.printStackTrace();//#GEN#[110]#PJ#
                } catch (Exception e) {//#GEN#[111]#PJ#
                    e.printStackTrace();//#GEN#[112]#PJ#
                }//#GEN#[113]#PJ#
            }//#GEN#[-1]#PJ#
        }//#GEN#[-1]#PJ#
//#GEN#[-1]#PJ#
    }//#GEN#[-1]#PJ#
    //#GEN#[-1]#PJ#
    //#GEN#[-1]#PJ#
    /* Parallel region, placed in a multi-task *///#GEN#[-1]#PJ#
    TASK(Pyjama.omp_get_num_threads()-1) private void _ompParallelRegion_0(_omp__parallelRegionVarHolderClass_Main0 __omp_vars) {//#GEN#[-1]#PJ#
//#GEN#[-1]#PJ#
        {//#GEN#[103]#PJ#
            if ( Pyjama.insideParallelRegion() ) {//#GEN#[104]#PJ#
                /* Share the following work-sharing construct amongst multiple threads only if inside a parallel region (need this check for orphaned work-sharing constructs) *///#GEN#[104]#PJ#
                boolean _omp_imFirst = _imFirst_2.getAndSet(false);//#GEN#[104]#PJ#
                _holderForPIFirst = _imFirst_2;//#GEN#[104]#PJ#
                if (_omp_imFirst) {//#GEN#[104]#PJ#
                    _ompWorkSharedUserCode_Main2_variables_instance = new _ompWorkSharedUserCode_Main2_variables();//#GEN#[104]#PJ#
                    int __omp_size_ = 0;//#GEN#[104]#PJ#
                    // TODO -- improve performance by calculating N from the parameters (as an equation) rather than looping//#GEN#[104]#PJ#
                    for (int i = 0; i < XSD_NUMBER; i = i+1) {//#GEN#[104]#PJ#
                        _lastElement_2 = i;//#GEN#[104]#PJ#
                        __omp_size_++;//#GEN#[104]#PJ#
                        }//#GEN#[104]#PJ#
                    _pi_2 = ParIteratorFactory.createParIterator(0, __omp_size_, 1, Pyjama.omp_get_num_threads(), ParIterator.Schedule.DYNAMIC, ParIterator.DEFAULT_CHUNKSIZE, false);//#GEN#[104]#PJ#
                    _omp_piVarContainer.add(_pi_2); // for interrupt statement//#GEN#[104]#PJ#
                    _pi_2.setThreadIdGenerator(new UniqueThreadIdGeneratorForOpenMP());//#GEN#[104]#PJ#
                    _waitBarrier_2.countDown();//#GEN#[104]#PJ#
                } else {//#GEN#[104]#PJ#
                    try { _waitBarrier_2.await(); } catch (InterruptedException __omp__ie) { __omp__ie.printStackTrace(); }//#GEN#[104]#PJ#
                }//#GEN#[104]#PJ#
                _ompWorkSharedUserCode_Main2(_ompWorkSharedUserCode_Main2_variables_instance);//#GEN#[104]#PJ#
                if (_imFinishedCounter_2.incrementAndGet() == PJPackageOnly.getThreadCountCurrentParallelRegion()) {//#GEN#[104]#PJ#
                    _waitBarrierAfter_2.countDown();//#GEN#[104]#PJ#
                } else {//#GEN#[104]#PJ#
                    try { //#GEN#[104]#PJ#
                        _waitBarrierAfter_2.await();//#GEN#[104]#PJ#
                    } catch (InterruptedException __omp__ie) { //#GEN#[104]#PJ#
                        __omp__ie.printStackTrace(); //#GEN#[104]#PJ#
                    }//#GEN#[104]#PJ#
                }//#GEN#[104]#PJ#
//#GEN#[104]#PJ#
            } else {//#GEN#[104]#PJ#
                /* Otherwise, this orphaned work-sharing is not within a parallel region.. so execute sequentially *///#GEN#[104]#PJ#
                for (int i = 0; i < XSD_NUMBER; i = i+1) //#GEN#[105]#PJ#
                {//#GEN#[105]#PJ#
                    Context.getOut().println("Validating " + instanceNames[i]);//#GEN#[106]#PJ#
                    try {//#GEN#[107]#PJ#
                        doValidationTests(loops[i], allInstanceBytes[i], schemaBoundValidator[i]);//#GEN#[108]#PJ#
                    } catch (SAXException e) {//#GEN#[109]#PJ#
                        e.printStackTrace();//#GEN#[110]#PJ#
                    } catch (Exception e) {//#GEN#[111]#PJ#
                        e.printStackTrace();//#GEN#[112]#PJ#
                    }//#GEN#[113]#PJ#
                }//#GEN#[114]#PJ#
            }//#GEN#[114]#PJ#
//#GEN#[114]#PJ#
        }//#GEN#[115]#PJ#
//#GEN#[115]#PJ#
    }
    private void doValidationTests(int loops, CachedFile file, Validator schemaValidator) throws ParserConfigurationException, IOException, SAXException {{//#GEN#[117]#PJ#
        for (int i = loops - 1; i >= 0; i--) //#GEN#[118]#PJ#
        {//#GEN#[118]#PJ#
            validateSource(i, createDomSource(file), schemaValidator);//#GEN#[119]#PJ#
            validateSource(i, createSaxSource(file), schemaValidator);//#GEN#[120]#PJ#
        }//#GEN#[121]#PJ#
    }
    }
    
    private void validateSource(int loop, Source source, Validator schemaValidator) {{//#GEN#[123]#PJ#
        schemaValidator.reset();//#GEN#[124]#PJ#
        schemaValidator.setErrorHandler(null);//#GEN#[125]#PJ#
        try {//#GEN#[126]#PJ#
            schemaValidator.validate(source);//#GEN#[127]#PJ#
            if (loop == 0) //#GEN#[128]#PJ#
            {//#GEN#[128]#PJ#
                Context.getOut().print("\tas " + source.getClass().getName());//#GEN#[129]#PJ#
                Context.getOut().println(" succeeded. (correct result)");//#GEN#[130]#PJ#
            }//#GEN#[131]#PJ#
        } catch (SAXException e) {//#GEN#[132]#PJ#
            Context.getOut().print("\tas " + source.getClass().getName());//#GEN#[133]#PJ#
            Context.getOut().println(" failed. (Incorrect result)" + Arrays.toString(loops));//#GEN#[134]#PJ#
            e.printStackTrace(Context.getOut());//#GEN#[135]#PJ#
        } catch (IOException e) {//#GEN#[136]#PJ#
            Context.getOut().println("Unable to validate due to IOException.");//#GEN#[137]#PJ#
        }//#GEN#[138]#PJ#
    }
    }
    
}//#GEN#[139]#PJ#
