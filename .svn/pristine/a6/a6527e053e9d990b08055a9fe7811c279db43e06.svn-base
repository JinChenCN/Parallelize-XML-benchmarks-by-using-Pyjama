package spec.benchmarks.xml.validation;//####[1]####
//####[1]####
import pj.parser.ast.visitor.DummyClassToDetermineVariableType;//####[3]####
import pt.runtime.*;//####[4]####
import pj.Pyjama;//####[5]####
import pj.PJPackageOnly;//####[6]####
import pj.UniqueThreadIdGeneratorForOpenMP;//####[7]####
import pi.ParIteratorFactory;//####[8]####
import pi.ParIterator;//####[9]####
import pi.reductions.Reducible;//####[10]####
import pi.reductions.Reduction;//####[11]####
import java.util.concurrent.atomic.*;//####[12]####
import java.util.concurrent.*;//####[13]####
import java.awt.EventQueue;//####[14]####
import java.util.concurrent.ExecutorService;//####[15]####
import java.util.concurrent.Executors;//####[16]####
import java.util.concurrent.TimeUnit;//####[17]####
import javax.swing.SwingUtilities;//####[18]####
import pj.parser.ast.visitor.DummyClassToDetermineVariableType;//####[19]####
import pj.*;//####[20]####
import java.io.File;//####[21]####
import java.io.IOException;//####[22]####
import java.util.concurrent.atomic.AtomicInteger;//####[23]####
import java.util.Arrays;//####[24]####
import javax.xml.XMLConstants;//####[25]####
import javax.xml.parsers.ParserConfigurationException;//####[26]####
import javax.xml.transform.Source;//####[27]####
import javax.xml.transform.stream.StreamSource;//####[28]####
import javax.xml.validation.Schema;//####[29]####
import javax.xml.validation.SchemaFactory;//####[30]####
import javax.xml.validation.Validator;//####[31]####
import org.xml.sax.SAXException;//####[32]####
import spec.harness.Constants;//####[33]####
import spec.harness.Context;//####[34]####
import spec.harness.Launch;//####[35]####
import spec.harness.Util;//####[36]####
import spec.harness.results.BenchmarkResult;//####[37]####
import spec.io.FileCache;//####[38]####
import spec.io.FileCache.CachedFile;//####[39]####
import spec.benchmarks.xml.XMLBenchmark;//####[40]####
import pi.reductions.Reducible;//####[42]####
import java.util.*;//####[43]####
//####[43]####
//-- ParaTask related imports//####[43]####
import pt.runtime.*;//####[43]####
import java.util.concurrent.ExecutionException;//####[43]####
import java.util.concurrent.locks.*;//####[43]####
import java.lang.reflect.*;//####[43]####
import pt.runtime.GuiThread;//####[43]####
import java.util.concurrent.BlockingQueue;//####[43]####
import java.util.ArrayList;//####[43]####
import java.util.List;//####[43]####
//####[43]####
public class Main extends XMLBenchmark {//####[45]####
    static{ParaTask.init();}//####[45]####
    /*  ParaTask helper method to access private/protected slots *///####[45]####
    public void __pt__accessPrivateSlot(Method m, Object instance, TaskID arg, Object interResult ) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {//####[45]####
        if (m.getParameterTypes().length == 0)//####[45]####
            m.invoke(instance);//####[45]####
        else if ((m.getParameterTypes().length == 1))//####[45]####
            m.invoke(instance, arg);//####[45]####
        else //####[45]####
            m.invoke(instance, arg, interResult);//####[45]####
    }//####[45]####
//####[46]####
    private static final int XSD_NUMBER = 6;//####[46]####
//####[46]####
    private static FileCache.CachedFile[] allInstanceBytes;//####[46]####
//####[46]####
    private static FileCache.CachedFile[] allSchemaBytes;//####[46]####
//####[46]####
    private static Validator[][] allValidators;//####[46]####
//####[46]####
    public static String testType() {//####[46]####
        {//####[46]####
            return MULTI;//####[47]####
        }//####[48]####
    }//####[49]####
//####[50]####
    private static ArrayList<ParIterator<?>> _omp_piVarContainer = new ArrayList<ParIterator<?>>();//####[50]####
//####[51]####
    private static AtomicBoolean _holderForPIFirst = new AtomicBoolean(false);//####[51]####
//####[53]####
    private static String[] schemaNames = { "validation_input.xsd", "periodic_table.xsd", "play.xsd", "structure.xsd", "po.xsd", "personal.xsd" };//####[53]####
//####[53]####
    private static String[] instanceNames = { "validation_input.xml", "periodicxsd.xml", "much_adoxsd.xml", "structure.xml", "po.xml", "personal.xml" };//####[53]####
//####[53]####
    private static int loops[] = { 1, 5, 3, 52, 647, 419 };//####[53]####
//####[53]####
    public static void setupBenchmark() {//####[53]####
        {//####[53]####
            String dirName = Util.getProperty(Constants.XML_VALIDATION_INPUT_DIR_PROP, null);//####[54]####
            try {//####[55]####
                allInstanceBytes = new FileCache.CachedFile[XSD_NUMBER];//####[56]####
                FileCache cache = Context.getFileCache();//####[57]####
                for (int i = 0; i < XSD_NUMBER; i++) //####[58]####
                {//####[59]####
                    String name = getFullName(Main.class, dirName, instanceNames[i]);//####[60]####
                    allInstanceBytes[i] = cache.new CachedFile(name);//####[61]####
                    allInstanceBytes[i].cache();//####[62]####
                }//####[63]####
                allSchemaBytes = new FileCache.CachedFile[XSD_NUMBER];//####[64]####
                for (int i = 0; i < XSD_NUMBER; i++) //####[65]####
                {//####[66]####
                    String name = getFullName(Main.class, dirName, schemaNames[i]);//####[67]####
                    allSchemaBytes[i] = cache.new CachedFile(name);//####[68]####
                    allSchemaBytes[i].cache();//####[69]####
                }//####[70]####
                setupValidators(dirName);//####[71]####
            } catch (IOException e) {//####[72]####
                e.printStackTrace(Context.getOut());//####[73]####
            }//####[74]####
        }//####[75]####
    }//####[76]####
//####[78]####
    private static void setupValidators(String dirName) {//####[78]####
        {//####[78]####
            int threads = Launch.currentNumberBmThreads;//####[79]####
            allValidators = new Validator[threads][XSD_NUMBER];//####[80]####
            try {//####[81]####
                SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);//####[82]####
                sf.setErrorHandler(null);//####[83]####
                for (int i = 0; i < XSD_NUMBER; i++) //####[84]####
                {//####[85]####
                    String xsdFilename = getFullName(Main.class, dirName, schemaNames[i]);//####[86]####
                    File tempURI = new File(xsdFilename);//####[87]####
                    Schema precompSchema;//####[88]####
                    if (tempURI.isAbsolute()) //####[89]####
                    {//####[90]####
                        precompSchema = sf.newSchema(new StreamSource(allSchemaBytes[i].getStream(), tempURI.toURI().toString()));//####[91]####
                    } else {//####[92]####
                        precompSchema = sf.newSchema(new StreamSource(allSchemaBytes[i].getStream(), xsdFilename));//####[93]####
                    }//####[94]####
                    for (int j = 0; j < threads; j++) //####[95]####
                    {//####[96]####
                        allValidators[j][i] = precompSchema.newValidator();//####[97]####
                    }//####[98]####
                }//####[99]####
            } catch (SAXException e) {//####[100]####
                e.printStackTrace();//####[101]####
            } catch (Exception e) {//####[102]####
                e.printStackTrace();//####[103]####
            }//####[104]####
        }//####[105]####
    }//####[106]####
//####[108]####
    private Validator[] schemaBoundValidator;//####[108]####
//####[108]####
    public Main(BenchmarkResult bmResult, int threadId) {//####[108]####
        super(bmResult, threadId);//####[109]####
        schemaBoundValidator = allValidators[threadId - 1];//####[110]####
    }//####[111]####
//####[111]####
    public void harnessMain() {//####[111]####
        {//####[111]####
            try {//####[112]####
                long start = System.currentTimeMillis();//####[113]####
                executeWorkload();//####[114]####
                long time = System.currentTimeMillis() - start;//####[115]####
                System.out.println("PJ Parallel xml validation has taken  " + (time / 1000.0) + " seconds.");//####[116]####
            } catch (Exception e) {//####[117]####
                e.printStackTrace(Context.getOut());//####[118]####
            }//####[119]####
        }//####[120]####
    }//####[121]####
//####[123]####
    public static void main(String[] args) throws Exception {//####[123]####
        Pyjama.init();//####[124]####
        {//####[125]####
            runSimple(Main.class, args);//####[126]####
        }//####[127]####
    }//####[128]####
//####[130]####
    private void executeWorkload() throws ParserConfigurationException, IOException, SAXException {//####[130]####
        {//####[130]####
            if (Pyjama.insideParallelRegion()) //####[132]####
            {//####[132]####
                {//####[134]####
                    for (int i = 0; i < XSD_NUMBER; i = i + 1) //####[135]####
                    {//####[136]####
                        Context.getOut().println("Validating " + instanceNames[i]);//####[137]####
                        try {//####[138]####
                            doValidationTests(loops[i], allInstanceBytes[i], schemaBoundValidator[i]);//####[139]####
                        } catch (SAXException e) {//####[140]####
                            e.printStackTrace();//####[141]####
                        } catch (Exception e) {//####[142]####
                            e.printStackTrace();//####[143]####
                        }//####[144]####
                    }//####[145]####
                }//####[146]####
            } else {//####[147]####
                PJPackageOnly.setThreadCountCurrentParallelRegion(Pyjama.omp_get_num_threads());//####[149]####
                _omp__parallelRegionVarHolderClass_Main0 _omp__parallelRegionVarHolderInstance_0 = new _omp__parallelRegionVarHolderClass_Main0();//####[152]####
                PJPackageOnly.setMasterThread(Thread.currentThread());//####[155]####
                TaskID _omp__parallelRegionTaskID_0 = _ompParallelRegion_0(_omp__parallelRegionVarHolderInstance_0);//####[156]####
                __pt___ompParallelRegion_0(_omp__parallelRegionVarHolderInstance_0);//####[157]####
                try {//####[158]####
                    _omp__parallelRegionTaskID_0.waitTillFinished();//####[158]####
                } catch (Exception __pt__ex) {//####[158]####
                    __pt__ex.printStackTrace();//####[158]####
                }//####[158]####
                PJPackageOnly.setMasterThread(null);//####[160]####
                _holderForPIFirst.set(true);//####[161]####
                PJPackageOnly.setThreadCountCurrentParallelRegion(1);//####[163]####
            }//####[164]####
        }//####[167]####
    }//####[168]####
//####[169]####
    private AtomicBoolean _imFirst_2 = new AtomicBoolean(true);//####[169]####
//####[170]####
    private AtomicInteger _imFinishedCounter_2 = new AtomicInteger(0);//####[170]####
//####[171]####
    private CountDownLatch _waitBarrier_2 = new CountDownLatch(1);//####[171]####
//####[172]####
    private CountDownLatch _waitBarrierAfter_2 = new CountDownLatch(1);//####[172]####
//####[173]####
    private ParIterator<Integer> _pi_2 = null;//####[173]####
//####[174]####
    private Integer _lastElement_2 = null;//####[174]####
//####[175]####
    private _ompWorkSharedUserCode_Main2_variables _ompWorkSharedUserCode_Main2_variables_instance = null;//####[175]####
//####[176]####
    private void _ompWorkSharedUserCode_Main2(_ompWorkSharedUserCode_Main2_variables __omp_vars) {//####[176]####
        Integer i;//####[178]####
        while (_pi_2.hasNext()) //####[179]####
        {//####[179]####
            i = _pi_2.next();//####[180]####
            {//####[182]####
                Context.getOut().println("Validating " + instanceNames[i]);//####[183]####
                try {//####[184]####
                    doValidationTests(loops[i], allInstanceBytes[i], schemaBoundValidator[i]);//####[185]####
                } catch (SAXException e) {//####[186]####
                    e.printStackTrace();//####[187]####
                } catch (Exception e) {//####[188]####
                    e.printStackTrace();//####[189]####
                }//####[190]####
            }//####[191]####
        }//####[192]####
    }//####[194]####
//####[198]####
    private static volatile Method __pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method = null;//####[198]####
    private synchronized static void __pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_ensureMethodVarSet() {//####[198]####
        if (__pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method == null) {//####[198]####
            try {//####[198]####
                __pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method = ParaTaskHelper.getDeclaredMethod(new ParaTaskHelper.ClassGetter().getCurrentClass(), "__pt___ompParallelRegion_0", new Class[] {//####[198]####
                    _omp__parallelRegionVarHolderClass_Main0.class//####[198]####
                });//####[198]####
            } catch (Exception e) {//####[198]####
                e.printStackTrace();//####[198]####
            }//####[198]####
        }//####[198]####
    }//####[198]####
    private TaskIDGroup<Void> _ompParallelRegion_0(_omp__parallelRegionVarHolderClass_Main0 __omp_vars) {//####[198]####
        //-- execute asynchronously by enqueuing onto the taskpool//####[198]####
        return _ompParallelRegion_0(__omp_vars, new TaskInfo());//####[198]####
    }//####[198]####
    private TaskIDGroup<Void> _ompParallelRegion_0(_omp__parallelRegionVarHolderClass_Main0 __omp_vars, TaskInfo taskinfo) {//####[198]####
        // ensure Method variable is set//####[198]####
        if (__pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method == null) {//####[198]####
            __pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_ensureMethodVarSet();//####[198]####
        }//####[198]####
        taskinfo.setParameters(__omp_vars);//####[198]####
        taskinfo.setMethod(__pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method);//####[198]####
        taskinfo.setInstance(this);//####[198]####
        return TaskpoolFactory.getTaskpool().enqueueMulti(taskinfo, Pyjama.omp_get_num_threads() - 1);//####[198]####
    }//####[198]####
    private TaskIDGroup<Void> _ompParallelRegion_0(TaskID<_omp__parallelRegionVarHolderClass_Main0> __omp_vars) {//####[198]####
        //-- execute asynchronously by enqueuing onto the taskpool//####[198]####
        return _ompParallelRegion_0(__omp_vars, new TaskInfo());//####[198]####
    }//####[198]####
    private TaskIDGroup<Void> _ompParallelRegion_0(TaskID<_omp__parallelRegionVarHolderClass_Main0> __omp_vars, TaskInfo taskinfo) {//####[198]####
        // ensure Method variable is set//####[198]####
        if (__pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method == null) {//####[198]####
            __pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_ensureMethodVarSet();//####[198]####
        }//####[198]####
        taskinfo.setTaskIdArgIndexes(0);//####[198]####
        taskinfo.addDependsOn(__omp_vars);//####[198]####
        taskinfo.setParameters(__omp_vars);//####[198]####
        taskinfo.setMethod(__pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method);//####[198]####
        taskinfo.setInstance(this);//####[198]####
        return TaskpoolFactory.getTaskpool().enqueueMulti(taskinfo, Pyjama.omp_get_num_threads() - 1);//####[198]####
    }//####[198]####
    private TaskIDGroup<Void> _ompParallelRegion_0(BlockingQueue<_omp__parallelRegionVarHolderClass_Main0> __omp_vars) {//####[198]####
        //-- execute asynchronously by enqueuing onto the taskpool//####[198]####
        return _ompParallelRegion_0(__omp_vars, new TaskInfo());//####[198]####
    }//####[198]####
    private TaskIDGroup<Void> _ompParallelRegion_0(BlockingQueue<_omp__parallelRegionVarHolderClass_Main0> __omp_vars, TaskInfo taskinfo) {//####[198]####
        // ensure Method variable is set//####[198]####
        if (__pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method == null) {//####[198]####
            __pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_ensureMethodVarSet();//####[198]####
        }//####[198]####
        taskinfo.setQueueArgIndexes(0);//####[198]####
        taskinfo.setIsPipeline(true);//####[198]####
        taskinfo.setParameters(__omp_vars);//####[198]####
        taskinfo.setMethod(__pt___ompParallelRegion_0__omp__parallelRegionVarHolderClass_Main0_method);//####[198]####
        taskinfo.setInstance(this);//####[198]####
        return TaskpoolFactory.getTaskpool().enqueueMulti(taskinfo, Pyjama.omp_get_num_threads() - 1);//####[198]####
    }//####[198]####
    public void __pt___ompParallelRegion_0(_omp__parallelRegionVarHolderClass_Main0 __omp_vars) {//####[198]####
        {//####[200]####
            if (Pyjama.insideParallelRegion()) //####[201]####
            {//####[201]####
                boolean _omp_imFirst = _imFirst_2.getAndSet(false);//####[203]####
                _holderForPIFirst = _imFirst_2;//####[204]####
                if (_omp_imFirst) //####[205]####
                {//####[205]####
                    _ompWorkSharedUserCode_Main2_variables_instance = new _ompWorkSharedUserCode_Main2_variables();//####[206]####
                    int __omp_size_ = 0;//####[207]####
                    for (int i = 0; i < XSD_NUMBER; i = i + 1) //####[209]####
                    {//####[209]####
                        _lastElement_2 = i;//####[210]####
                        __omp_size_++;//####[211]####
                    }//####[212]####
                    _pi_2 = ParIteratorFactory.createParIterator(0, __omp_size_, 1, Pyjama.omp_get_num_threads(), ParIterator.Schedule.DYNAMIC, ParIterator.DEFAULT_CHUNKSIZE, false);//####[213]####
                    _omp_piVarContainer.add(_pi_2);//####[214]####
                    _pi_2.setThreadIdGenerator(new UniqueThreadIdGeneratorForOpenMP());//####[215]####
                    _waitBarrier_2.countDown();//####[216]####
                } else {//####[217]####
                    try {//####[218]####
                        _waitBarrier_2.await();//####[218]####
                    } catch (InterruptedException __omp__ie) {//####[218]####
                        __omp__ie.printStackTrace();//####[218]####
                    }//####[218]####
                }//####[219]####
                _ompWorkSharedUserCode_Main2(_ompWorkSharedUserCode_Main2_variables_instance);//####[220]####
                if (_imFinishedCounter_2.incrementAndGet() == PJPackageOnly.getThreadCountCurrentParallelRegion()) //####[221]####
                {//####[221]####
                    _waitBarrierAfter_2.countDown();//####[222]####
                } else {//####[223]####
                    try {//####[224]####
                        _waitBarrierAfter_2.await();//####[225]####
                    } catch (InterruptedException __omp__ie) {//####[226]####
                        __omp__ie.printStackTrace();//####[227]####
                    }//####[228]####
                }//####[229]####
            } else {//####[231]####
                for (int i = 0; i < XSD_NUMBER; i = i + 1) //####[233]####
                {//####[234]####
                    Context.getOut().println("Validating " + instanceNames[i]);//####[235]####
                    try {//####[236]####
                        doValidationTests(loops[i], allInstanceBytes[i], schemaBoundValidator[i]);//####[237]####
                    } catch (SAXException e) {//####[238]####
                        e.printStackTrace();//####[239]####
                    } catch (Exception e) {//####[240]####
                        e.printStackTrace();//####[241]####
                    }//####[242]####
                }//####[243]####
            }//####[244]####
        }//####[246]####
    }//####[248]####
//####[248]####
//####[249]####
    private void doValidationTests(int loops, CachedFile file, Validator schemaValidator) throws ParserConfigurationException, IOException, SAXException {//####[249]####
        {//####[249]####
            for (int i = loops - 1; i >= 0; i--) //####[250]####
            {//####[251]####
                validateSource(i, createDomSource(file), schemaValidator);//####[252]####
                validateSource(i, createSaxSource(file), schemaValidator);//####[253]####
            }//####[254]####
        }//####[255]####
    }//####[256]####
//####[258]####
    private void validateSource(int loop, Source source, Validator schemaValidator) {//####[258]####
        {//####[258]####
            schemaValidator.reset();//####[259]####
            schemaValidator.setErrorHandler(null);//####[260]####
            try {//####[261]####
                schemaValidator.validate(source);//####[262]####
            } catch (SAXException e) {//####[263]####
                Context.getOut().print("\tas " + source.getClass().getName());//####[264]####
                Context.getOut().println(" failed. (Incorrect result)" + Arrays.toString(loops));//####[265]####
                e.printStackTrace(Context.getOut());//####[266]####
            } catch (IOException e) {//####[267]####
                Context.getOut().println("Unable to validate due to IOException.");//####[268]####
            }//####[269]####
        }//####[270]####
    }//####[271]####
}//####[271]####
